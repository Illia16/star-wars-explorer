{"version":3,"sources":["Components/presentational/WaitingLogo/WaitingLogo.js","styles/theme.js","Components/smart/UserInput/UserInputContext.js","Components/smart/Loading/LoadingContext.js","Components/smart/Error/ErrorContext.js","Components/smart/Results/ResultsContext.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","color","position","left","top","Waiting","classes","aria-label","className","theme","createMuiTheme","overrides","MuiContainer","minHeight","display","flexDirection","padding","alignItems","MuiList","justifyContent","margin","MuiListItem","width","textAlign","MuiAppBar","textTransform","colorPrimary","backgroundColor","positionFixed","MuiButton","fontSize","MuiTypography","h2","marginTop","MuiCard","background","UserInputContext","createContext","useInput","useContext","UserInputProvider","children","useState","searchQuery","setInput","currentPageRes","changePage","Provider","value","userChoice","e","target","name","searchQueryReset","LoadingContext","useLoading","LoadingProvider","isLoading","setLoading","ErrorContext","useError","ErrorProvider","errorMsg","setErrorMsg","ResultsContext","ResultsProvider","people","films","planets","results","getData","useEffect","axios","url","method","params","page","then","res","data","catch","error","response","detail","Header","lazy","MainMenu","MainResults","SubResults","App","ThemeProvider","Container","maxWidth","basename","process","fallback","WaitingLogo","exact","path","title","states","to","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2be1a66f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CircularProgress } from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n    root: {\r\n        color: '#FFE81F',\r\n        position: \"absolute\",\r\n        left: '45vw',\r\n        top: '45vh',\r\n    }\r\n}\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nconst Waiting = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <CircularProgress aria-label=\"loading data\" className={classes.root}></CircularProgress>\r\n    )\r\n}\r\n\r\nexport default Waiting;","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        // entire page\r\n        MuiContainer: {\r\n            root: {\r\n                minHeight: '100vh',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                padding: '0 !important',\r\n                alignItems: 'center',\r\n            },\r\n        },\r\n        // UL\r\n        MuiList: {\r\n            root: {\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                margin: 'auto',\r\n                padding: '40px',\r\n            }\r\n        },\r\n        // UL LI\r\n        MuiListItem: {\r\n            root: {\r\n                color: '#FFE81F',\r\n                display: 'initial',\r\n                width: '200px',\r\n                margin: '5px 0',\r\n                textAlign: \"center\",\r\n                padding: '0 !important',\r\n            }\r\n        },\r\n        // Top banner with h1\r\n        MuiAppBar: {\r\n            root: {\r\n                padding: '20px 0',\r\n                textTransform: 'capitalize',\r\n            },\r\n            colorPrimary: {\r\n                backgroundColor: '#29292d',\r\n            },\r\n            positionFixed: {\r\n                position: 'static'\r\n            }\r\n        },\r\n        // button(next, previous page)\r\n        MuiButton: {\r\n            root: {\r\n                backgroundColor: '#29292d', \r\n                color: '#FFE81F',\r\n                '&:hover': {\r\n                    backgroundColor: '#FFE81F', \r\n                    color: '#29292d',\r\n                },\r\n                margin: '20px',\r\n                fontSize: '1.3rem',\r\n            },\r\n        },\r\n        // headings\r\n        MuiTypography: {\r\n            root: {\r\n                color: '#FFE81F',\r\n            },\r\n            h2: {\r\n                marginTop: 'auto'\r\n            }\r\n        },\r\n        // subResults card background\r\n        MuiCard: {\r\n            root: {\r\n                margin: 'auto',\r\n                background: '#29292d',\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;","import React, { useState, createContext, useContext } from 'react';\r\n\r\nconst UserInputContext = createContext();\r\n\r\nexport const useInput = () => {\r\n    return useContext(UserInputContext);\r\n};\r\n\r\n// UserInputProvider functional\r\nexport default function UserInputProvider({ children }){\r\n    // saving the corresponding results from API call\r\n    const [searchQuery, setInput] = useState(null);\r\n    const [currentPageRes, changePage] = useState(1);\r\n\r\n\r\n    const userChoice = (e) => {\r\n        setInput(e.target.name);\r\n    };\r\n    \r\n    const searchQueryReset = () => {\r\n        setInput(null);\r\n        changePage(1);\r\n    };\r\n\r\n    return(\r\n        <UserInputContext.Provider value={{\r\n            searchQuery: searchQuery,\r\n            setInput: setInput,\r\n\r\n            currentPageRes: currentPageRes,\r\n            changePage: changePage,\r\n\r\n            userChoice: userChoice,\r\n\r\n            searchQueryReset: searchQueryReset,\r\n        }}>\r\n            { children }\r\n        </UserInputContext.Provider>\r\n    )\r\n};","import React, { useState, createContext, useContext } from 'react';\r\n\r\nconst LoadingContext = createContext();\r\n\r\nexport const useLoading = () => {\r\n    return useContext(LoadingContext);\r\n};\r\n\r\n// UserInputProvider functional\r\nexport default function LoadingProvider({ children }){\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    return(\r\n        <LoadingContext.Provider value={{\r\n            isLoading: isLoading,\r\n            setLoading: setLoading,\r\n        }}>\r\n            { children }\r\n        </LoadingContext.Provider>\r\n    )\r\n};","import React, { useState, createContext, useContext } from 'react';\r\n\r\nconst ErrorContext = createContext();\r\n\r\nexport const useError = () => {\r\n    return useContext(ErrorContext);\r\n};\r\n\r\n// UserInputProvider functional\r\nexport default function ErrorProvider({ children }){\r\n    const [errorMsg, setErrorMsg] = useState(null);\r\n\r\n    return(\r\n        <ErrorContext.Provider value={{\r\n            errorMsg: errorMsg,\r\n            setErrorMsg: setErrorMsg,\r\n        }}>\r\n            { children }\r\n        </ErrorContext.Provider>\r\n    )\r\n};","import React, { useState, createContext, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { useInput } from '../UserInput/UserInputContext';\r\nimport { useLoading } from '../Loading/LoadingContext';\r\nimport { useError } from '../Error/ErrorContext';\r\n\r\nconst ResultsContext = createContext();\r\n\r\nexport const useResults = () => {\r\n    return useContext(ResultsContext);\r\n};\r\n\r\nexport default function ResultsProvider({ children }){\r\n    const { searchQuery, currentPageRes } = useInput();\r\n    const { setLoading } = useLoading();\r\n    const { setErrorMsg } = useError();\r\n\r\n    const [results, getData] = useState({people: null, films: null, planets: null});\r\n\r\n    useEffect(() => {\r\n        if (searchQuery) {\r\n            setLoading(true)\r\n            axios({\r\n                url: `https://swapi.dev/api/${searchQuery}`,\r\n                method: 'GET',\r\n                params: {\r\n                    page: currentPageRes,\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    getData({ ...results, [searchQuery]: res.data })\r\n                    setLoading(false)\r\n                })\r\n                .catch(error => {\r\n                    // saving error msg from API in state for further use     \r\n                    error.response ? setErrorMsg(error.response.data.detail) : setErrorMsg('Bad URL');\r\n                    setLoading(false)\r\n                })\r\n        };\r\n    }, [searchQuery, currentPageRes]);\r\n\r\n    return(\r\n        <ResultsContext.Provider value={{\r\n            results: results,\r\n            getData: getData,\r\n        }}>\r\n            { children }\r\n        </ResultsContext.Provider>\r\n    )\r\n};","// React\r\nimport React, { Suspense, lazy } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect} from 'react-router-dom';\r\n\r\n// Material UI\r\nimport { Container } from '@material-ui/core/';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport theme from './styles/theme';\r\nimport WaitingLogo from './Components/presentational/WaitingLogo/WaitingLogo';\r\n\r\n// My Sass styles\r\nimport \"./styles/general.scss\";\r\n\r\n// Importing contexts\r\nimport { useInput } from './Components/smart/UserInput/UserInputContext';\r\nimport { useLoading } from './Components/smart/Loading/LoadingContext';\r\nimport { useError } from './Components/smart/Error/ErrorContext';\r\nimport { useResults } from './Components/smart/Results/ResultsContext';\r\n\r\n// Components\r\nconst Header = lazy(() => import('./Components/presentational/header/Header'));\r\nconst MainMenu = lazy(() => import('./Components/views/MainMenu/MainMenu'));\r\nconst MainResults = lazy(() => import('./Components/views/MainResults/MainResults'));\r\nconst SubResults = lazy(() => import('./Components/views/SubResults/SubResults'));\r\n\r\n\r\nfunction App() {\r\n  const { searchQuery, setInput, currentPageRes, changePage, userChoice, searchQueryReset } = useInput();\r\n  const { isLoading, setLoading } = useLoading();\r\n  const { errorMsg, setErrorMsg } = useError();\r\n  const { results } = useResults();\r\n\r\n  return (\r\n    // Material UI for styling, Router, Components\r\n    <ThemeProvider theme={theme}>\r\n      <Container maxWidth={false}>\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <Suspense fallback={ <WaitingLogo></WaitingLogo> }>\r\n            <Route exact path=\"/\">\r\n              <Header title={searchQuery} />\r\n              <MainMenu\r\n                states={results} \r\n                userChoice={userChoice}\r\n              />\r\n            </Route>\r\n            \r\n            {/* Rendering MainResults component only when API call is done(loading ended) and there's results available */}\r\n            <Route exact path={[\"/people/\", \"/films/\", \"/planets/\"]}>\r\n              { !isLoading && results[searchQuery] ? <MainResults states={results} searchQuery={searchQuery} changePage={changePage} searchQueryReset={searchQueryReset} /> : <WaitingLogo></WaitingLogo>\r\n              }\r\n              {/* Redirecting to main page if route is other than \"/\" AND there's no searchQuery(page refreshed) */}\r\n              { !searchQuery && <Redirect to=\"/\"/> }\r\n            </Route>\r\n            \r\n            {/* Rendering SubResults component based on every unique path */}\r\n            <Route path={[\"/people/:peopleID/\", \"/films/:filmsID/\", \"/planets/:planetsID/\"]}  component={ SubResults } >\r\n              { !searchQuery && <Redirect to=\"/\"/> }\r\n            </Route>\r\n          </Suspense>\r\n        </Router>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Importing contexts\r\nimport UserInputProvider from './Components/smart/UserInput/UserInputContext';\r\nimport LoadingProvider from './Components/smart/Loading/LoadingContext';\r\nimport ErrorProvider from './Components/smart/Error/ErrorContext';\r\nimport ResultsProvider from './Components/smart/Results/ResultsContext';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <UserInputProvider>\r\n      <LoadingProvider>\r\n        <ErrorProvider>\r\n          <ResultsProvider>\r\n            <App />\r\n          </ResultsProvider>\r\n        </ErrorProvider>\r\n      </LoadingProvider>\r\n    </UserInputProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}