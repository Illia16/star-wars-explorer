{"version":3,"sources":["styles/WaitingLogo.js","styles/theme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","color","position","left","top","Waiting","classes","aria-label","className","theme","createMuiTheme","overrides","MuiContainer","minHeight","display","flexDirection","padding","alignItems","MuiList","justifyContent","margin","MuiListItem","width","textAlign","MuiAppBar","textTransform","colorPrimary","backgroundColor","positionFixed","MuiButton","fontSize","MuiTypography","h2","marginTop","MuiCard","background","Header","lazy","MainMenu","MainResults","SubResults","App","useState","searchQuery","setInput","currentPageRes","changePage","people","films","planets","results","getData","isLoading","setLoading","setloadingErrorMsg","useEffect","axios","url","method","params","page","then","res","data","catch","error","response","detail","ThemeProvider","Container","maxWidth","basename","process","fallback","WaitingLogo","exact","path","title","states","userChoice","e","target","name","searchQueryReset","to","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e492972b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CircularProgress } from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n    root: {\r\n        color: '#FFE81F',\r\n        position: \"absolute\",\r\n        left: '45vw',\r\n        top: '45vh',\r\n    }\r\n}\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nconst Waiting = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <CircularProgress aria-label=\"loading data\" className={classes.root}></CircularProgress>\r\n    )\r\n}\r\n\r\nexport default Waiting;","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        // entire page\r\n        MuiContainer: {\r\n            root: {\r\n                minHeight: '100vh',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                padding: '0 !important',\r\n                alignItems: 'center',\r\n            },\r\n        },\r\n        // UL\r\n        MuiList: {\r\n            root: {\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                margin: 'auto',\r\n                padding: '40px',\r\n            }\r\n        },\r\n        // UL LI\r\n        MuiListItem: {\r\n            root: {\r\n                color: '#FFE81F',\r\n                display: 'initial',\r\n                width: '200px',\r\n                margin: '5px 0',\r\n                textAlign: \"center\",\r\n                padding: '0 !important',\r\n            }\r\n        },\r\n        // Top banner with h1\r\n        MuiAppBar: {\r\n            root: {\r\n                padding: '20px 0',\r\n                textTransform: 'capitalize',\r\n            },\r\n            colorPrimary: {\r\n                backgroundColor: '#29292d',\r\n            },\r\n            positionFixed: {\r\n                position: 'static'\r\n            }\r\n        },\r\n        // button(next, previous page)\r\n        MuiButton: {\r\n            root: {\r\n                backgroundColor: '#29292d', \r\n                color: '#FFE81F',\r\n                '&:hover': {\r\n                    backgroundColor: '#FFE81F', \r\n                    color: '#29292d',\r\n                },\r\n                margin: '20px',\r\n                fontSize: '1.3rem',\r\n            },\r\n        },\r\n        // headings\r\n        MuiTypography: {\r\n            root: {\r\n                color: '#FFE81F',\r\n            },\r\n            h2: {\r\n                marginTop: 'auto'\r\n            }\r\n        },\r\n        // subResults card background\r\n        MuiCard: {\r\n            root: {\r\n                margin: 'auto',\r\n                background: '#29292d',\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;","// React\r\nimport React, { Suspense, lazy, useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// Material UI\r\nimport { Container } from '@material-ui/core/';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport theme from './styles/theme';\r\nimport WaitingLogo from './styles/WaitingLogo';\r\n\r\n// My Sass styles\r\nimport \"./styles/app.scss\";\r\n\r\n// Components\r\nconst Header = lazy(() => import('./Components/Header'));\r\nconst MainMenu = lazy(() => import('./Components/MainMenu'));\r\nconst MainResults = lazy(() => import('./Components/MainResults'));\r\nconst SubResults = lazy(() => import('./Components/SubResults/SubResults'));\r\n\r\n\r\nfunction App() {\r\n  // saving the corresponding results from API call\r\n  const [searchQuery, setInput] = useState(null);\r\n  const [currentPageRes, changePage] = useState(1);\r\n\r\n  const [results, getData] = useState({people: null, films: null, planets: null});\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [loadingErrorMsg, setloadingErrorMsg] = useState(null);\r\n\r\n  const userChoice = (e) => {\r\n    setInput(e.target.name);\r\n  };\r\n\r\n  const searchQueryReset = () => {\r\n    setInput(null);\r\n    changePage(1);\r\n  };\r\n\r\n  useEffect( () => {\r\n    if (searchQuery) {\r\n      setLoading(true)\r\n      axios({\r\n          url: `https://swapi.dev/api/${searchQuery}`,\r\n          method: 'GET',\r\n          params: {\r\n            page: currentPageRes,\r\n          }\r\n      })\r\n      .then( (res) => {\r\n        getData({...results, [searchQuery]: res.data})\r\n        setLoading(false)\r\n      })\r\n      .catch( error => {\r\n        // saving error msg from API in state for further use\r\n          setloadingErrorMsg(error.response.data.detail);\r\n      })\r\n    };\r\n  }, [searchQuery, currentPageRes]);\r\n\r\n  return (\r\n    // Material UI for styling, Router, Components\r\n    <ThemeProvider theme={theme}>\r\n      <Container maxWidth={false}>\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <Suspense fallback={ <WaitingLogo></WaitingLogo> }>\r\n            <Route exact path=\"/\">\r\n              <Header title={searchQuery} />\r\n              <MainMenu\r\n                states={results} \r\n                userChoice={userChoice}\r\n              />\r\n            </Route>\r\n            \r\n            {/* Rendering MainResults component only when API call is done(loading ended) and there's results available */}\r\n            <Route exact path={[\"/people/\", \"/films/\", \"/planets/\"]}>\r\n              { !isLoading && results[searchQuery] ? <MainResults states={results} searchQuery={searchQuery} changePage={changePage} searchQueryReset={searchQueryReset} /> : <WaitingLogo></WaitingLogo>\r\n              }\r\n              {/* Redirecting to main page if route is other than \"/\" AND there's no searchQuery(page refreshed) */}\r\n              { !searchQuery && <Redirect to=\"/\"/> }\r\n            </Route>\r\n            \r\n            {/* Rendering SubResults component based on every unique path */}\r\n            <Route path={[\"/people/:peopleID/\", \"/films/:filmsID/\", \"/planets/:planetsID/\"]}  component={ SubResults } >\r\n              { !searchQuery && <Redirect to=\"/\"/> }\r\n            </Route>\r\n          </Suspense>\r\n        </Router>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}