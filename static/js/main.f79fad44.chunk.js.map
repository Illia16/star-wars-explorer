{"version":3,"sources":["Components/Header.js","Components/MainMenu.js","Components/MainResults.js","Components/SubResults.js","App.js","serviceWorker.js","index.js"],"names":["Header","MainMenu","props","userChoice","exact","path","to","name","onClick","MainResults","searchQuery","states","switchPage","next","results","previous","nextPage","split","pop","previousPage","className","map","entity","key","pathname","data","title","SubResults","state","this","location","axios","url","method","params","search","match","then","res","setState","catch","error","console","log","length","height","mass","hair_color","skin_color","gender","birth_year","director","producer","release_date","terrain","population","Component","App","e","a","target","getData","whatToGet","page","isLoading","people","films","planets","basename","process","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kVAUeA,MARf,WACI,OACI,gCACI,oDCUGC,EAZE,SAAEC,GAAY,IACnBC,EAAeD,EAAfC,WAER,OACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,4BAAI,kBAAC,IAAD,CAASC,GAAG,UAAUC,KAAK,SAASC,QAAUL,GAA9C,WACJ,4BAAI,kBAAC,IAAD,CAASG,GAAG,SAASC,KAAK,QAAQC,QAAWL,GAA7C,WACJ,4BAAI,kBAAC,IAAD,CAASG,GAAG,WAAWC,KAAK,UAAUC,QAASL,GAA/C,cCkDDM,EAzDK,SAACP,GAAW,IACZQ,EAA+BR,EAAxCS,OAASD,YAAgBE,EAAeV,EAAfU,WAE1BC,EAAOX,EAAMS,OAAOG,QAAQJ,GAAaG,KACzCE,EAAWb,EAAMS,OAAOG,QAAQJ,GAAaK,SAE7CC,EAAWH,EAAOA,EAAKI,MAAM,IAAIC,MAAQ,KACzCC,EAAeJ,EAAWA,EAASE,MAAM,IAAIC,MAAQ,KAE3D,OACI,oCACI,yCAAeR,GACf,wBAAIU,UAAU,kBAENlB,EAAMS,OAAOG,QAAQJ,GAAaI,QAAQO,KAAI,SAACC,GAC3C,MACoB,WAAhBZ,EACA,wBAAIa,IAAKD,EAAOf,MACZ,kBAAC,IAAD,CAASD,GAAI,CAAEkB,SAAS,WAAD,OAAaF,EAAOf,MAAQkB,KAAM,CAACvB,WAAWoB,EAAOf,OAE9D,UAAhBG,EACF,wBAAIa,IAAKD,EAAOI,OACZ,kBAAC,IAAD,CAASpB,GAAI,CAAEkB,SAAS,UAAD,OAAYF,EAAOI,OAASD,KAAM,CAACvB,WAAYoB,EAAOI,QAE/D,YAAhBhB,EACF,wBAAIa,IAAKD,EAAOf,MACZ,kBAAC,IAAD,CAASD,GAAI,CAAEkB,SAAS,YAAD,OAAcF,EAAOf,MAAQkB,KAAM,CAACvB,WAAYoB,EAAOf,OAEhF,SAOdM,EACA,6BACME,GAAY,4BAAQP,QAAU,kBAAMI,EAAWF,EAAaS,KAAhD,uBACd,4BAAQX,QAAU,kBAAMI,EAAWF,EAAaM,KAAhD,oBAEFD,EACF,6BACI,4BAAQP,QAAU,kBAAMI,EAAWF,EAAaS,KAAhD,wBAEFN,GAAQE,EACV,6BACI,4BAAQP,QAAU,kBAAMI,EAAWF,EAAaS,KAAhD,uBACA,4BAAQX,QAAU,kBAAMI,EAAWF,EAAaM,KAAhD,oBAEF,kCAAQN,EAAR,kBAGN,kBAAC,IAAD,CAASJ,GAAG,KAAZ,uBCeGqB,E,kDAjEX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTd,QAAS,IAHH,E,gEAOO,IAAD,OAC6BJ,EAAuBmB,KAAK3B,MAAlE4B,SAAWL,KAAQvB,MAASS,OAAUD,YAE7CqB,IAAM,CACFC,IAAI,yBAAD,OAA2BtB,EAA3B,KACHuB,OAAQ,MACRC,OAAQ,CACJC,OAAQN,KAAK3B,MAAMkC,MAAMF,OAAOxB,EAAc,SAGrD2B,MAAM,SAACC,GACJ,EAAKC,SAAS,CACVzB,QAASwB,EAAIb,KAAKX,aAGzB0B,OAAO,SAAAC,GAAWC,QAAQC,IAAIF,Q,+BAGzB,IACuC/B,EAAuBmB,KAAK3B,MAAlE4B,SAAWL,KAAQvB,MAASS,OAAUD,YAE7C,OADAgC,QAAQC,IAAId,KAAK3B,OAEb,oCACuB,WAAhBQ,GAA4BmB,KAAKD,MAAMd,QAAQ8B,OAC9C,6BACI,4BAAKf,KAAKD,MAAMd,QAAQ,GAAGP,MAC3B,sCAAYsB,KAAKD,MAAMd,QAAQ,GAAG+B,QAClC,oCAAUhB,KAAKD,MAAMd,QAAQ,GAAGgC,MAChC,0CAAgBjB,KAAKD,MAAMd,QAAQ,GAAGiC,YACtC,0CAAgBlB,KAAKD,MAAMd,QAAQ,GAAGkC,YACtC,sCAAYnB,KAAKD,MAAMd,QAAQ,GAAGmC,QAClC,0CAAgBpB,KAAKD,MAAMd,QAAQ,GAAGoC,aAExB,UAAhBxC,GAA2BmB,KAAKD,MAAMd,QAAQ8B,OAEhD,6BACI,4BAAKf,KAAKD,MAAMd,QAAQ,GAAGY,OAC3B,wCAAcG,KAAKD,MAAMd,QAAQ,GAAGqC,UACpC,wCAActB,KAAKD,MAAMd,QAAQ,GAAGsC,UACpC,4CAAkBvB,KAAKD,MAAMd,QAAQ,GAAGuC,eAE1B,YAAhB3C,GAA6BmB,KAAKD,MAAMd,QAAQ8B,OAClD,6BACI,4BAAKf,KAAKD,MAAMd,QAAQ,GAAGP,MAC3B,uCAAasB,KAAKD,MAAMd,QAAQ,GAAGwC,SACnC,0CAAgBzB,KAAKD,MAAMd,QAAQ,GAAGyC,aAExC,2CAGN,kBAAC,IAAD,CAAOlD,KAAI,WAAMK,IACb,kBAAC,IAAD,CAASJ,GAAE,WAAMI,IAAjB,eAA8CA,S,GA3DzC8C,aCkEVC,E,kDA3Db,aAAe,IAAD,8BACV,gBAQJtD,WATc,uCASD,WAAOuD,GAAP,SAAAC,EAAA,sEACL,EAAKpB,SAAS,CAClB7B,YAAagD,EAAEE,OAAOrD,OAFb,OAKX,EAAKsD,QAAQ,EAAKjC,MAAMlB,YAAa,GAL1B,2CATC,wDAiBdmD,QAAU,SAACC,EAAWC,GACpB,EAAKxB,SAAS,CAAEyB,WAAW,IAC3BjC,IAAM,CACJC,IAAI,yBAAD,OAA2B8B,GAC9B7B,OAAQ,MACRC,OAAQ,CACN6B,KAAMA,KAGX1B,MAAM,SAACC,GACN,EAAKC,SAAS,CACZyB,WAAW,EACXlD,QAAQ,2BACH,EAAKc,MAAMd,SADT,kBAEJ,EAAKc,MAAMlB,YAAc4B,EAAIb,YAInCe,OAAO,SAAAC,GAAWC,QAAQC,IAAIF,OAjC3B,EAAKb,MAAQ,CACXlB,YAAa,GACbI,QAAS,CAACmD,OAAQ,KAAMC,MAAO,KAAMC,QAAS,MAC9CH,WAAW,GALH,E,qDAuCZ,OACE,kBAAC,IAAD,CAAQI,SAAUC,uBAChB,kBAAC,IAAD,CAAOjE,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEM,OAAQkB,KAAKD,MACbzB,WAAY0B,KAAK1B,cAIrB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,CAAC,UAAW,SAAU,cACpCwB,KAAKD,MAAMoC,WAAanC,KAAKD,MAAMd,QAAQe,KAAKD,MAAMlB,aAAe,kBAAC,EAAD,CAAaC,OAAQkB,KAAKD,MAAOhB,WAAYiB,KAAKgC,UAAc,4CAI1I,kBAAC,IAAD,CAAOxD,KAAM,CAAC,oBAAqB,kBAAmB,uBAAyBiE,UAAY3C,S,GAvDjF6B,aCEEe,QACW,cAA7BC,OAAO1C,SAAS2C,UAEe,UAA7BD,OAAO1C,SAAS2C,UAEhBD,OAAO1C,SAAS2C,SAASrC,MACvB,2DCbNsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd3C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM2C,c","file":"static/js/main.f79fad44.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <h1>Star Wars Explorer</h1>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { Route, NavLink } from 'react-router-dom';\r\n\r\nconst MainMenu = ( props ) => {\r\n    const { userChoice } = props;\r\n\r\n    return(\r\n        <Route exact path=\"/\">\r\n            <li><NavLink to=\"/people\" name=\"people\" onClick={ userChoice } >People</NavLink></li>\r\n            <li><NavLink to=\"/films\" name=\"films\" onClick={  userChoice } >Movies</NavLink></li>\r\n            <li><NavLink to=\"/planets\" name=\"planets\" onClick={userChoice } >Planets</NavLink></li>\r\n        </Route>\r\n    );\r\n};\r\n\r\nexport default MainMenu;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst MainResults = (props) => {\r\n    const {states:{ searchQuery },  switchPage } = props;\r\n\r\n    const next = props.states.results[searchQuery].next;\r\n    const previous = props.states.results[searchQuery].previous;\r\n\r\n    const nextPage = next ? next.split('').pop() : null;\r\n    const previousPage = previous ? previous.split('').pop() : null;\r\n\r\n    return(\r\n        <>  \r\n            <h1>Star Wars {searchQuery}</h1>\r\n            <ul className=\"listOfEntities\">\r\n                {\r\n                    props.states.results[searchQuery].results.map((entity) => {\r\n                        return (\r\n                            searchQuery === \"people\" ?\r\n                            <li key={entity.name}>\r\n                                <NavLink to={{ pathname: `/people/${entity.name}`, data: {props} }}>{entity.name}</NavLink>\r\n                            </li>\r\n                            : searchQuery === \"films\" ?\r\n                            <li key={entity.title}>\r\n                                <NavLink to={{ pathname: `/films/${entity.title}`, data: {props} }} >{entity.title}</NavLink>\r\n                            </li>\r\n                            : searchQuery === \"planets\" ?\r\n                            <li key={entity.name}>\r\n                                <NavLink to={{ pathname: `/planets/${entity.name}`, data: {props} }} >{entity.name}</NavLink>\r\n                            </li>\r\n                            : null\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n\r\n            {\r\n                next ?\r\n                <div>\r\n                    { previous && <button onClick={ () => switchPage(searchQuery, previousPage) }>Go to previous page</button> }\r\n                    <button onClick={ () => switchPage(searchQuery, nextPage) }>Go to next page</button>\r\n                </div>\r\n                : previous ?\r\n                <div>\r\n                    <button onClick={ () => switchPage(searchQuery, previousPage) }>Go to previous page</button> \r\n                </div>\r\n                : next && previous ?\r\n                <div>\r\n                    <button onClick={ () => switchPage(searchQuery, previousPage) }>Go to previous page</button> \r\n                    <button onClick={ () => switchPage(searchQuery, nextPage) }>Go to next page</button>\r\n                </div>\r\n                : <p>All {searchQuery} are displayed</p>\r\n            }\r\n\r\n            <NavLink to=\"/\">Back to main menu</NavLink>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainResults;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Route, NavLink } from 'react-router-dom';\r\n\r\nclass SubResults extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            results: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {location:{ data: { props: { states: { searchQuery } }} } } = this.props;\r\n\r\n        axios({\r\n            url: `https://swapi.dev/api/${searchQuery}/`,\r\n            method: 'GET',\r\n            params: {\r\n                search: this.props.match.params[searchQuery + \"ID\"],\r\n            },\r\n        })\r\n        .then( (res) => {\r\n            this.setState({\r\n                results: res.data.results,\r\n            })\r\n        })\r\n        .catch( error => { console.log(error); })\r\n    }\r\n\r\n    render() {\r\n        const {location:{ data: { props: { states: { searchQuery } }} } } = this.props;\r\n        console.log(this.props);\r\n        return(\r\n            <>\r\n                {  searchQuery === \"people\" && this.state.results.length ?          \r\n                    <div>\r\n                        <h3>{this.state.results[0].name}</h3>\r\n                        <p>Height: {this.state.results[0].height}</p>\r\n                        <p>Mass: {this.state.results[0].mass}</p>\r\n                        <p>Hair color: {this.state.results[0].hair_color}</p>\r\n                        <p>Skin Color: {this.state.results[0].skin_color}</p>\r\n                        <p>Gender: {this.state.results[0].gender}</p>\r\n                        <p>Birth year: {this.state.results[0].birth_year}</p>\r\n                    </div>\r\n                    : searchQuery === \"films\" && this.state.results.length ?\r\n                        \r\n                    <div>\r\n                        <h3>{this.state.results[0].title}</h3>\r\n                        <p>Director: {this.state.results[0].director}</p>\r\n                        <p>Producer: {this.state.results[0].producer}</p>\r\n                        <p>Release date: {this.state.results[0].release_date}</p>\r\n                    </div>\r\n                    : searchQuery === \"planets\" && this.state.results.length ?       \r\n                    <div>\r\n                        <h3>{this.state.results[0].name}</h3>\r\n                        <p>Terrain: {this.state.results[0].terrain}</p>\r\n                        <p>Population: {this.state.results[0].population}</p>\r\n                    </div>\r\n                    : <div>Loading...</div>\r\n                }\r\n                \r\n                <Route path={`/${searchQuery}`}>\r\n                    <NavLink to={`/${searchQuery}`} >Back to all {searchQuery}</NavLink>\r\n                </Route>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SubResults;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport axios from 'axios';\nimport \"./styles/app.scss\";\n\nimport Header from './Components/Header';\nimport MainMenu from './Components/MainMenu';\nimport MainResults from './Components/MainResults';\nimport SubResults from './Components/SubResults';\n\nclass App extends Component {\n  constructor() {\n      super();\n      this.state = {\n        searchQuery: '',\n        results: {people: null, films: null, planets: null},\n        isLoading: false,\n      };\n  };\n\n  userChoice = async (e) => {\n    await this.setState({\n      searchQuery: e.target.name,\n    })\n\n    this.getData(this.state.searchQuery, 1)\n  }\n\n  getData = (whatToGet, page) => {\n    this.setState({ isLoading: true });\n    axios({\n      url: `https://swapi.dev/api/${whatToGet}`,\n      method: 'GET',\n      params: {\n        page: page,\n    },\n  })\n  .then( (res) => {\n    this.setState({\n      isLoading: false,\n      results: {\n        ...this.state.results,\n        [this.state.searchQuery]: res.data,\n      }\n    })\n  })\n  .catch( error => { console.log(error); })\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route exact path=\"/\">\n          <Header />\n          <MainMenu\n            states={this.state} \n            userChoice={this.userChoice}\n          />\n        </Route>\n        \n        <Route exact path={[\"/people\", \"/films\", \"/planets\"]}>\n          { !this.state.isLoading && this.state.results[this.state.searchQuery] ? <MainResults states={this.state} switchPage={this.getData} /> : <div>Loading...</div>\n          }\n        </Route>\n\n        <Route path={[\"/people/:peopleID\", \"/films/:filmsID\", \"/planets/:planetsID\"]}  component={ SubResults } />\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}