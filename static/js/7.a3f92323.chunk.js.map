{"version":3,"sources":["Components/Header.js","Components/MainResults.js","Components/Functions/checkNextPage.js","Components/Functions/checkPreviousPage.js"],"names":["Header","props","title","variant","component","align","MainResults","page","searchQuery","changePage","searchQueryReset","nextPage","states","next","split","pop","previousPage","checkPreviousPage","previous","Typography","List","className","results","map","entity","ListItem","key","name","to","pathname","data","Button","onClick"],"mappings":"gIAAA,mDAmBeA,UAXf,SAAgBC,GAAQ,IACZC,EAAUD,EAAVC,MACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,MAAM,UACtCH,GAAQ,yB,+HC6EbI,UArEK,SAACL,GAAW,IClBMM,EDmB3BC,EAA8CP,EAA9CO,YAAaC,EAAiCR,EAAjCQ,WAAYC,EAAqBT,EAArBS,iBAE1BC,GCrB4BJ,EDqBHN,EAAMW,OAAOJ,GAAaK,MCpB3CN,EAAKO,MAAM,IAAIC,MAAQ,KDqB/BC,EEzBK,SAA2BT,GACtC,OAAOA,EAAOA,EAAKO,MAAM,IAAIC,MAAQ,KFwBhBE,CAAkBhB,EAAMW,OAAOJ,GAAaU,UACjE,OACI,oCACI,kBAAClB,EAAA,QAAD,CAAQE,MAAOM,KAITG,IAAaK,GACf,kBAACG,EAAA,EAAD,CAAYhB,QAAQ,KAAKC,UAAU,KAAKC,MAAM,UAA9C,OACSG,EADT,kBAMJ,kBAACY,EAAA,EAAD,CAAMC,UAAU,WAERpB,EAAMW,OAAOJ,GAAac,QAAQC,KAAI,SAACC,GACnC,MACoB,WAAhBhB,EACA,kBAACiB,EAAA,EAAD,CAAUC,IAAKF,EAAOG,MAClB,kBAAC,IAAD,CAASC,GAAI,CAAEC,SAAS,WAAD,OAAaL,EAAOG,MAAQG,KAAM,CAAC7B,QAAOuB,YAAYA,EAAOG,OAEtE,UAAhBnB,EACF,kBAACiB,EAAA,EAAD,CAAWC,IAAKF,EAAOtB,OACnB,kBAAC,IAAD,CAAS0B,GAAI,CAAEC,SAAS,UAAD,OAAYL,EAAOtB,OAAS4B,KAAM,CAAC7B,QAAOuB,YAAaA,EAAOtB,QAEvE,YAAhBM,EACF,kBAACiB,EAAA,EAAD,CAAUC,IAAKF,EAAOG,MAClB,kBAAC,IAAD,CAASC,GAAI,CAAEC,SAAS,YAAD,OAAcL,EAAOG,MAAQG,KAAM,CAAC7B,QAAOuB,YAAaA,EAAOG,OAExF,SAUdhB,EACI,yBAAKU,UAAU,iBAEX,kBAACU,EAAA,EAAD,CAAQC,QAAU,kBAAMvB,EAAWE,KAAnC,cAENK,EACE,yBAAKK,UAAU,iBACX,kBAACU,EAAA,EAAD,CAAQC,QAAU,kBAAMvB,EAAWO,KAAnC,kBAELL,GAAYK,EACX,yBAAKK,UAAU,iBACX,kBAACU,EAAA,EAAD,CAAQC,QAAU,kBAAMvB,EAAWO,KAAnC,iBACA,kBAACe,EAAA,EAAD,CAAQC,QAAU,kBAAMvB,EAAWE,KAAnC,cAEJ,KAIR,yBAAKU,UAAU,kBACX,kBAAC,IAAD,CAASO,GAAG,IAAII,QAAUtB,GAA1B","file":"static/js/7.a3f92323.chunk.js","sourcesContent":["// React\r\nimport React from 'react';\r\n\r\n// Material UI\r\nimport AppBar from'@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport 'fontsource-roboto';\r\n\r\nfunction Header(props) {\r\n    const { title } = props;\r\n    return (\r\n        <AppBar>\r\n            <Typography variant=\"h1\" component=\"h1\" align=\"center\" >\r\n                {  !title ? 'Star Wars Explorer' : title }\r\n            </Typography>\r\n        </AppBar>\r\n    )\r\n};\r\n\r\nexport default Header;","// React\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// Material UI\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport 'fontsource-roboto';\r\n\r\n// My Sass styles\r\nimport \"../styles/app.scss\";\r\n\r\n// UI Components\r\nimport Header from './Header';\r\n\r\n// Functions\r\nimport checkNextPage from './Functions/checkNextPage'\r\nimport checkPreviousPage from './Functions/checkPreviousPage'\r\n\r\nconst MainResults = (props) => {\r\n    const {searchQuery, changePage, searchQueryReset } = props;\r\n\r\n    const nextPage = checkNextPage(props.states[searchQuery].next);\r\n    const previousPage = checkPreviousPage(props.states[searchQuery].previous);\r\n    return(\r\n        <>\r\n            <Header title={searchQuery}/>\r\n            \r\n            {/* checking if there's only 1 page for results (10 or less entities based on the API structure) */}\r\n            {\r\n                (!nextPage && !previousPage) &&\r\n                <Typography variant=\"h2\" component=\"h2\" align=\"center\" >\r\n                    All {searchQuery} are displayed\r\n                </Typography>\r\n            }\r\n            \r\n            {/* getting a list of entities (people || films || planets), based on the user selection */}\r\n            <List className=\"subList\">\r\n                {\r\n                    props.states[searchQuery].results.map((entity) => {\r\n                        return (\r\n                            searchQuery === \"people\" ?\r\n                            <ListItem key={entity.name} >\r\n                                <NavLink to={{ pathname: `/people/${entity.name}`, data: {props, entity} }}>{entity.name}</NavLink>\r\n                            </ListItem>\r\n                            : searchQuery === \"films\" ?\r\n                            <ListItem  key={entity.title}>\r\n                                <NavLink to={{ pathname: `/films/${entity.title}`, data: {props, entity} }} >{entity.title}</NavLink>\r\n                            </ListItem>\r\n                            : searchQuery === \"planets\" ?\r\n                            <ListItem key={entity.name}>\r\n                                <NavLink to={{ pathname: `/planets/${entity.name}`, data: {props, entity} }} >{entity.name}</NavLink>\r\n                            </ListItem>\r\n                            : null\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n            \r\n            {/* after the fist api call, looking at the API results wheather there is next/previous pages available; rendering(or not) button \"Next page\" if there's more than 10 entiries in the results  */}\r\n            {/* rendering \"Previous page\" only when \"Next page\" is clicked so that there's an API call made to get the next 10 results */}\r\n            {/* Clicking \"Next page\" or \"Previous page\" makes a corresponding API call after which new results are rendered*/}\r\n            {\r\n                nextPage ?\r\n                    <div className=\"nextPrevPages\">\r\n                        {/* { previousPage && <Button onClick={ () => changePage(previousPage) } >Previous page</Button> } */}\r\n                        <Button onClick={ () => changePage(nextPage) }>Next page</Button>\r\n                    </div>\r\n                : previousPage ?\r\n                    <div className=\"nextPrevPages\">\r\n                        <Button onClick={ () => changePage(previousPage) } >Previous page</Button>\r\n                    </div>\r\n                : (nextPage && previousPage) ?\r\n                    <div className=\"nextPrevPages\">\r\n                        <Button onClick={ () => changePage(previousPage) } >Previous page</Button>\r\n                        <Button onClick={ () => changePage(nextPage) }>Next page</Button>\r\n                    </div>\r\n                :   null\r\n            }\r\n\r\n            {/* Back to main menu link */}\r\n            <div className=\"goToUpperLevel\">\r\n                <NavLink to=\"/\" onClick={ searchQueryReset }>Back to main menu</NavLink>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainResults;","// figuring out wheather there's more pages for more results (more than 10 entities)\r\n// strings for next/previous pages from API\r\n// getting a previous/next page number from the strings. If no page, then null\r\nexport default function checkNextPage(page) {\r\n    return page ? page.split('').pop() : null;\r\n};","export default function checkPreviousPage(page) {\r\n    return page ? page.split('').pop() : null;\r\n};"],"sourceRoot":""}