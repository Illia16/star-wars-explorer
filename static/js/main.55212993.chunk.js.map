{"version":3,"sources":["styles/WaitingLogo.js","styles/theme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","color","position","left","top","Waiting","classes","aria-label","className","theme","createMuiTheme","overrides","MuiContainer","minHeight","display","flexDirection","padding","alignItems","MuiList","justifyContent","margin","MuiListItem","width","textAlign","MuiAppBar","textTransform","colorPrimary","backgroundColor","positionFixed","MuiButton","fontSize","MuiTypography","h2","marginTop","MuiCard","background","Header","lazy","MainMenu","MainResults","SubResults","App","userChoice","e","a","setState","searchQuery","target","name","getData","state","whatToGet","page","isLoading","axios","url","method","params","then","res","results","data","catch","error","loadingErrorMsg","response","detail","people","films","planets","ThemeProvider","Container","maxWidth","basename","process","fallback","WaitingLogo","exact","path","states","this","switchPage","to","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.55212993.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CircularProgress } from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n    root: {\r\n        color: '#FFE81F',\r\n        position: \"absolute\",\r\n        left: '45vw',\r\n        top: '45vh',\r\n    }\r\n}\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nconst Waiting = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <CircularProgress aria-label=\"loading data\" className={classes.root}></CircularProgress>\r\n    )\r\n}\r\n\r\nexport default Waiting;","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        // entire page\r\n        MuiContainer: {\r\n            root: {\r\n                minHeight: '100vh',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                padding: '0 !important',\r\n                alignItems: 'center',\r\n            },\r\n        },\r\n        // UL\r\n        MuiList: {\r\n            root: {\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                margin: 'auto',\r\n                padding: '40px',\r\n            }\r\n        },\r\n        // UL LI\r\n        MuiListItem: {\r\n            root: {\r\n                color: '#FFE81F',\r\n                display: 'initial',\r\n                width: '200px',\r\n                margin: '5px 0',\r\n                textAlign: \"center\",\r\n                padding: '0 !important',\r\n            }\r\n        },\r\n        // Top banner with h1\r\n        MuiAppBar: {\r\n            root: {\r\n                padding: '20px 0',\r\n                textTransform: 'capitalize',\r\n            },\r\n            colorPrimary: {\r\n                backgroundColor: '#29292d',\r\n            },\r\n            positionFixed: {\r\n                position: 'static'\r\n            }\r\n        },\r\n        // button(next, previous page)\r\n        MuiButton: {\r\n            root: {\r\n                backgroundColor: '#29292d', \r\n                color: '#FFE81F',\r\n                '&:hover': {\r\n                    backgroundColor: '#FFE81F', \r\n                    color: '#29292d',\r\n                },\r\n                margin: '20px',\r\n                fontSize: '1.3rem',\r\n            },\r\n        },\r\n        // headings\r\n        MuiTypography: {\r\n            root: {\r\n                color: '#FFE81F',\r\n            },\r\n            h2: {\r\n                marginTop: 'auto'\r\n            }\r\n        },\r\n        // subResults card background\r\n        MuiCard: {\r\n            root: {\r\n                margin: 'auto',\r\n                background: '#29292d',\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;","// React\nimport React, { Component, Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Route, Redirect} from 'react-router-dom';\nimport axios from 'axios';\n\n// Material UI\nimport { Container } from '@material-ui/core/';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './styles/theme';\nimport WaitingLogo from './styles/WaitingLogo';\n\n// My Sass styles\nimport \"./styles/app.scss\";\n\n// Components\nconst Header = lazy(() => import('./Components/Header'));\nconst MainMenu = lazy(() => import('./Components/MainMenu'));\nconst MainResults = lazy(() => import('./Components/MainResults'));\nconst SubResults = lazy(() => import('./Components/SubResults'));\n\nclass App extends Component {\n  constructor() {\n      super();\n      this.state = {\n        searchQuery: '',\n        results: {people: null, films: null, planets: null},\n        isLoading: false,\n        loadingErrorMsg: null,\n      };\n  };\n\n  userChoice = async (e) => {\n    await this.setState({\n      searchQuery: e.target.name,\n    })\n\n    this.getData(this.state.searchQuery, 1)\n  }\n\n  getData = (whatToGet, page) => {\n    this.setState({ isLoading: true });\n      axios({\n        url: `https://swapi.dev/api/${whatToGet}`,\n        method: 'GET',\n        params: {\n          page: page,\n      },\n    })\n    .then( (res) => {\n      this.setState({\n        isLoading: false,\n        results: {\n          ...this.state.results,\n          [this.state.searchQuery]: res.data,\n        }\n      })\n    })\n    .catch( error => {\n      // saving error msg from API in state for further use\n      this.setState({\n        loadingErrorMsg: error.response.data.detail\n      });\n    })\n  }\n\n  render() {\n    return (\n      // Material UI for styling, Router, Components\n      <ThemeProvider theme={theme}>\n        <Container maxWidth={false}>\n          <Router basename={process.env.PUBLIC_URL}>\n            <Suspense fallback={ <WaitingLogo></WaitingLogo> }>\n              <Route exact path=\"/\">\n                <Header />\n                <MainMenu\n                  states={this.state} \n                  userChoice={this.userChoice}\n                />\n              </Route>\n              \n              {/* Rendering MainResults component only when API call is done(loading ended) and there's results available */}\n              <Route exact path={[\"/people\", \"/films\", \"/planets\"]}>\n                { !this.state.isLoading && this.state.results[this.state.searchQuery] ? <MainResults states={this.state} switchPage={this.getData} /> : <WaitingLogo></WaitingLogo>\n                }\n                \n                {/* Redirecting to main page if route is other than \"/\" AND there's no searchQuery(page refreshed) */}\n                { !this.state.searchQuery && <Redirect to=\"/\"/> }\n              </Route>\n              \n              {/* Rendering SubResults component based on every unique path */}\n              <Route path={[\"/people/:peopleID\", \"/films/:filmsID\", \"/planets/:planetsID\"]}  component={ SubResults } >\n                { !this.state.searchQuery && <Redirect to=\"/\"/> }\n              </Route>\n            </Suspense>\n          </Router>\n        </Container>\n      </ThemeProvider>\n    );\n  };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}